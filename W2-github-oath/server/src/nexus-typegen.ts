/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    uuid<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "UUID";
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values. BigInt can represent values between -(2^53) + 1 and 2^53 - 1.
     */
    bigInt<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "BigInt";
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    uuid<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "UUID";
    /**
     * The `BigInt` scalar type represents non-fractional signed whole numeric values. BigInt can represent values between -(2^53) + 1 and 2^53 - 1.
     */
    bigInt<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "BigInt";
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  BigInt: any
  DateTime: Date
  UUID: string
}

export interface NexusGenObjects {
  AuthCode: { // root type
    code: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    expiresAt: NexusGenScalars['DateTime']; // DateTime!
    id: NexusGenScalars['UUID']; // UUID!
  }
  Mutation: {};
  Post: { // root type
    id?: number | null; // Int
    published?: boolean | null; // Boolean
    title?: string | null; // String
  }
  Query: {};
  User: { // root type
    dateJoined: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    githubAvatarUrl: string; // String!
    githubID: NexusGenScalars['BigInt']; // BigInt!
    githubUsername: string; // String!
    id: NexusGenScalars['BigInt']; // BigInt!
  }
  UserToken: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    displayName: string; // String!
    expiresAt: NexusGenScalars['DateTime']; // DateTime!
    hash?: string | null; // String
    id: NexusGenScalars['UUID']; // UUID!
    token?: string | null; // String
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AuthCode: { // field return type
    code: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    expiresAt: NexusGenScalars['DateTime']; // DateTime!
    id: NexusGenScalars['UUID']; // UUID!
  }
  Mutation: { // field return type
    createUserToken: NexusGenRootTypes['UserToken'] | null; // UserToken
    deleteUserToken: NexusGenRootTypes['UserToken'] | null; // UserToken
    upsertMe: NexusGenRootTypes['User']; // User!
  }
  Post: { // field return type
    id: number | null; // Int
    published: boolean | null; // Boolean
    title: string | null; // String
  }
  Query: { // field return type
    UserTokens: Array<NexusGenRootTypes['UserToken'] | null> | null; // [UserToken]
    me: NexusGenRootTypes['User'] | null; // User
  }
  User: { // field return type
    dateJoined: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    githubAppAuthorized: boolean; // Boolean!
    githubAvatarUrl: string; // String!
    githubID: NexusGenScalars['BigInt']; // BigInt!
    githubUsername: string; // String!
    id: NexusGenScalars['BigInt']; // BigInt!
  }
  UserToken: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    displayName: string; // String!
    expiresAt: NexusGenScalars['DateTime']; // DateTime!
    hash: string | null; // String
    id: NexusGenScalars['UUID']; // UUID!
    token: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  AuthCode: { // field return type name
    code: 'String'
    createdAt: 'DateTime'
    expiresAt: 'DateTime'
    id: 'UUID'
  }
  Mutation: { // field return type name
    createUserToken: 'UserToken'
    deleteUserToken: 'UserToken'
    upsertMe: 'User'
  }
  Post: { // field return type name
    id: 'Int'
    published: 'Boolean'
    title: 'String'
  }
  Query: { // field return type name
    UserTokens: 'UserToken'
    me: 'User'
  }
  User: { // field return type name
    dateJoined: 'DateTime'
    email: 'String'
    githubAppAuthorized: 'Boolean'
    githubAvatarUrl: 'String'
    githubID: 'BigInt'
    githubUsername: 'String'
    id: 'BigInt'
  }
  UserToken: { // field return type name
    createdAt: 'DateTime'
    displayName: 'String'
    expiresAt: 'DateTime'
    hash: 'String'
    id: 'UUID'
    token: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createUserToken: { // args
      expiresAt?: NexusGenScalars['DateTime'] | null; // DateTime
    }
    deleteUserToken: { // args
      id: NexusGenScalars['UUID']; // UUID!
    }
    upsertMe: { // args
      email: string; // String!
      githubAvatarUrl: string; // String!
      githubID: NexusGenScalars['BigInt']; // BigInt!
      githubUsername: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: false
    __typename: false
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}